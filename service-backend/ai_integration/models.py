# service-backend/ai_integration/models.py
from django.db import models
from django.conf import settings
from django.utils.translation import gettext_lazy as _

User = settings.AUTH_USER_MODEL

class AIRecommendation(models.Model):
    """
    Stores recommendations generated by the AI service for a user.
    Recommendations can be of different types (Academic, Career, Art, etc.).
    """
    RECOMMENDATION_TYPES = [
        ('academic', _('Academic')),
        ('career', _('Career')),
        ('artistic', _('Artistic')),
        ('general', _('General')),
        # Add more types as needed based on AI output
    ]

    user = models.ForeignKey(User, related_name='ai_recommendations', on_delete=models.CASCADE, verbose_name=_("user"))
    recommendation_type = models.CharField(_("recommendation type"), max_length=20, choices=RECOMMENDATION_TYPES)
    title = models.CharField(_("title"), max_length=255)
    description = models.TextField(_("description"), blank=True) # Detailed description from AI

    # Store the full raw output from the AI service for potential future analysis or debugging
    deepseek_output_json = models.JSONField(
        _("deepseek output JSON"),
        blank=True,
        null=True,
        help_text=_("Full raw output data received from the DeepSeek AI service.")
    )

    # Timestamp of when the recommendation was generated/recorded
    timestamp = models.DateTimeField(_("timestamp"), auto_now_add=True)
    # Optional: Timestamp of when it was last updated (if recommendations can be refined)
    updated_at = models.DateTimeField(_("updated at"), auto_now=True)

    class Meta:
        verbose_name = _("AI Recommendation")
        verbose_name_plural = _("AI Recommendations")
        ordering = ['-timestamp']

    def __str__(self):
        return f"{self.get_recommendation_type_display()}: {self.title} (for {self.user})"
