"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.x.

For more information on this file, see
https://docs.djangoproject.com/en/4.x/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.x/ref/settings/
"""

import os
from pathlib import Path
from decouple import config # For environment variables

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.x/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='your-default-dev-secret-key-change-in-production!')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt', # JWT Authentication
    'django_filters',
    'captcha', # For registration/login captcha

    # Local apps
    'account', # User management
    'assessment', # Tests, packages, results
    'ai_integration', # AI interaction, recommendations
    'resume', # Resume builder
    'skill', # Skill enhancement courses
    'career', # Job market & business
    'counseling', # Counseling module
    'content', # General content
    'util', # Utilities
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # Add template directories if needed, e.g., [BASE_DIR / 'templates']
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.x/ref/settings/#databases

# Default to SQLite for simplicity, but recommend PostgreSQL for production
DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE', default='django.db.backends.sqlite3'),
        'NAME': config('DB_NAME', default=BASE_DIR / 'db.sqlite3'),
        'USER': config('DB_USER', default=''),
        'PASSWORD': config('DB_PASSWORD', default=''),
        'HOST': config('DB_HOST', default=''),
        'PORT': config('DB_PORT', default=''),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.x/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.x/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.x/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Directory for collected static files

# Media files (User uploads, JSON files for assessments)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.x/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
# As we are using National Code as username, we'll likely need a custom user model.
# We'll define it in the `account` app.
AUTH_USER_MODEL = 'account.User' # Points to our custom User model

# Django REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication', # Optional, if you want session auth too
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', # Default permission, can be overridden per view
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        # 'rest_framework.filters.SearchFilter', # If needed
        # 'rest_framework.filters.OrderingFilter', # If needed
    ],
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', # Optional global pagination
    # 'PAGE_SIZE': 20
}

# Simple JWT Settings
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60), # Adjust as needed
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),   # Adjust as needed
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY, # Uses the project's SECRET_KEY
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id", # Use the default User model ID
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    # Customization for using national_code as identifier in payload if needed
    # "USER_ID_FIELD": "national_code", # Not recommended as primary key, but for payload
    # Requires customizing the JWT serializer if needed
}

# Captcha Settings (if using django-simple-captcha)
# https://django-simple-captcha.readthedocs.io/en/latest/advanced.html#configuration
CAPTCHA_FONT_SIZE = 30
# CAPTCHA_LENGTH = 6 # Default is 5
# CAPTCHA_IMAGE_SIZE = (150, 50) # Default is (200, 50)
# CAPTCHA_BACKGROUND_COLOR = '#ffffff'
# CAPTCHA_FOREGROUND_COLOR = '#001100'
# CAPTCHA_NOISE_FUNCTIONS = (
#     'captcha.helpers.noise_arcs',
#     'captcha.helpers.noise_dots',
# )
# CAPTCHA_FILTER_FUNCTIONS = (
#     'captcha.helpers.post_smooth',
# )
# CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge' # Default is math challenge
# CAPTCHA_FLITE_PATH = None # Path to flite binary if using audio CAPTCHA
# CAPTCHA_TIMEOUT = 5 # Minutes



# --- External Service Configurations ---

# DeepSeek AI API Settings
# Note: The prompt says DeepSeek is installed locally/self-hosted.
# You would typically point this to the internal address of your DeepSeek instance.
# Example: http://deepseek-ai-service:5000/api/v1/chat/completions (if using Docker)
# Or http://localhost:5000/api/v1/chat/completions (for local dev)
# For external hosted API, it would be the public endpoint.
DEEPSEEK_API_URL = config('DEEPSEEK_API_URL', default='http://localhost:5000/api/v1/chat/completions')
# If the local API requires an API key or specific headers, configure them here.
# DEEPSEEK_API_KEY = config('DEEPSEEK_API_KEY', default='') # Example if needed

# ZarinPal Payment Gateway Settings
ZARINPAL_MERCHANT_ID = config('ZARINPAL_MERCHANT_ID', default='your-merchant-id-here')
ZARINPAL_CALLBACK_URL = config('ZARINPAL_CALLBACK_URL', default='http://localhost:8000/api/payments/verify/')
ZARINPAL_SANDBOX = config('ZARINPAL_SANDBOX', default=True, cast=bool) # True for testing, False for production
# ZarinPal API URLs (can be different for sandbox/production)
ZARINPAL_API_REQUEST_URL = 'https://sandbox.zarinpal.com/pg/rest/WebGate/PaymentRequest.json' if ZARINPAL_SANDBOX else 'https://www.zarinpal.com/pg/rest/WebGate/PaymentRequest.json'
ZARINPAL_API_VERIFY_URL = 'https://sandbox.zarinpal.com/pg/rest/WebGate/PaymentVerification.json' if ZARINPAL_SANDBOX else 'https://www.zarinpal.com/pg/rest/WebGate/PaymentVerification.json'
ZARINPAL_API_START_PAY_URL = 'https://sandbox.zarinpal.com/pg/StartPay/' if ZARINPAL_SANDBOX else 'https://www.zarinpal.com/pg/StartPay/'

# SMS Gateway Settings (Example for a generic service)
# You will need to replace these with the settings for your chosen SMS provider (e.g., Kavenegar, Ghasedak).
SMS_API_URL = config('SMS_API_URL', default='https://api.sms-provider.com/send') # Example URL
SMS_API_KEY = config('SMS_API_KEY', default='your-sms-api-key-here')
SMS_DEFAULT_SENDER = config('SMS_DEFAULT_SENDER', default='NexaPlatform') # Your approved sender number/ID

# --- Logging Configuration (Enhanced) ---
# ... (previous logging config remains the same, or can be expanded) ...
# Example: Add specific loggers for your apps or external service interactions
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#         # 'file': { # Example file handler
#         #     'level': 'INFO',
#         #     'class': 'logging.FileHandler',
#         #     'filename': 'django_info.log',
#         # },
#     },
#     'root': {
#         'handlers': ['console'],
#         'level': 'DEBUG' if DEBUG else 'INFO',
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         'account': { # Logger for the account app
#             'handlers': ['console'],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#         'assessment': { # Logger for the assessment app
#             'handlers': ['console'],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#         # Add loggers for other apps as needed
#         # 'util.tasks': { # Logger for Celery tasks in util app
#         #     'handlers': ['console'],
#         #     'level': 'INFO',
#         #     'propagate': False,
#         # },
#     },
# }
